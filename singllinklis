#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;
    
public:
    LinkedList() {
        head = nullptr;
    }
    
    void insertStart(int x) {
        Node* newNode = new Node(x);
        newNode->next = head;
        head = newNode;
    }
    
    void insertAt(int x, int pos) {
        if (pos == 0) {
            insertStart(x);
            return;
        }
        
        Node* newNode = new Node(x);
        Node* temp = head;
        
        for (int i = 0; i < pos - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }
        
        if (temp == nullptr) {
            cout << "Position too big!" << endl;
            return;
        }
        
        newNode->next = temp->next;
        temp->next = newNode;
    }
    
    void deleteStart() {
        if (head == nullptr) {
            cout << "List empty!" << endl;
            return;
        }
        
        Node* temp = head;
        head = head->next;
        delete temp;
    }
    
    void deleteAt(int pos) {
        if (head == nullptr) {
            cout << "List empty!" << endl;
            return;
        }
        
        if (pos == 0) {
            deleteStart();
            return;
        }
        
        Node* temp = head;
        for (int i = 0; i < pos - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }
        
        if (temp == nullptr || temp->next == nullptr) {
            cout << "Position too big!" << endl;
            return;
        }
        
        Node* toDelete = temp->next;
        temp->next = toDelete->next;
        delete toDelete;
    }
    
    Node* search(int x) {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->data == x) return temp;
            temp = temp->next;
        }
        return nullptr;
    }
    
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
};

int main() {
    LinkedList list;
    
    list.insertStart(30);
    list.insertStart(20);
    list.insertStart(10);
    cout << "List: ";
    list.display();
    
    list.insertAt(25, 2);
    cout << "After insert 25 at pos 2: ";
    list.display();
    
    list.deleteStart();
    cout << "After delete start: ";
    list.display();
    
    list.deleteAt(1);
    cout << "After delete pos 1: ";
    list.display();
    
    Node* found = list.search(25);
    if (found) cout << "Found 25!" << endl;
    else cout << "25 not found!" << endl;
    
    return 0;
}
