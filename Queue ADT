#include <iostream>
using namespace std;

class Queue {
private:
    int* arr;
    int front, rear, size, capacity;
    
public:
    Queue(int cap = 100) {
        capacity = cap;
        arr = new int[capacity];
        front = size = 0;
        rear = capacity - 1;
    }
    
    ~Queue() {
        delete[] arr;
    }
    
    void enqueue(int x) {
        if (size == capacity) {
            cout << "Queue full!" << endl;
            return;
        }
        
        rear = (rear + 1) % capacity;
        arr[rear] = x;
        size++;
    }
    
    int dequeue() {
        if (size == 0) {
            cout << "Queue empty!" << endl;
            return -1;
        }
        
        int x = arr[front];
        front = (front + 1) % capacity;
        size--;
        return x;
    }
    
    int getFront() {
        if (size == 0) return -1;
        return arr[front];
    }
    
    bool isEmpty() {
        return size == 0;
    }
    
    void display() {
        if (size == 0) {
            cout << "Queue empty!" << endl;
            return;
        }
        
        cout << "Queue: ";
        for (int i = 0; i < size; i++) {
            int index = (front + i) % capacity;
            cout << arr[index] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue q(5);
    
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);
    q.enqueue(50);
    q.display();
    
    cout << "Dequeued: " << q.dequeue() << endl;
    cout << "Dequeued: " << q.dequeue() << endl;
    q.display();
    
    q.enqueue(60);
    q.enqueue(70);
    q.display();
    
    return 0;
}
